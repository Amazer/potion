h1. Perl5 on p2 Language backwards-compatible Extensions

With p2 I plan to parse and execute perl5 asis.

Problem will arise with XS code, since the VM is different, and not
all XS API functions can be supported.  It should be much easier to
use XS-like functionality with the new FFI, or by using extension
libraries with native calls. See @lib/readline@. So we will loose
40% of CPAN code, but will win on performance, expressibility and
compile-time error checking when binding libs.

h2. Perl5 Language Extensions

h3. All data are objects, all declarations can be optionally typed

I.e. all core types are implictly blessed into the int, str, num
classes and mixins thereof.
See "pddtypes.pod":https://github.com/rurban/perl/blob/d1c07ab82fd3acf17803a9f7dbd8e3ab3c5d3903/pddtypes.pod and "perltypes.pod":https://github.com/rurban/perl/blob/05514649c35a695734bc8e02911e7efef6ee4dde/pod/perltypes.pod for more.

<pre><code>
my int $i;
my const str $s = "string";
my const int $h = {foo => 1, bla => 0};
my const int @a = (0..9);
</code></pre>

h3. const declarations for data, @ISA, classes and functions/methods

method calls should be inlinable and compile-time optimizable.

h3. sized arrays

<pre><code>
	my $a[10];
	my int $a[10];
</code></pre>

Sized arrays are are non-autovivifying and initialized with undef,
resp. if typed 0, 0.0, or "". This speeds up array access by factor 2-4.
See "optimizing compiler benchmarks part 3":http://blogs.perl.org/users/rurban/2012/10/optimizing-compiler-benchmarks-part-3.html

h3. no magic

A new pragma "no magic" applies to all visible objects in scope.

<pre><code>
     {
       no magic;
       use Config;
       print $Config{'ccflags'};
     }
</code></pre>
@=> compile-time error: Invalid use of tie with no magic@

use
<pre><code>
     {
       no magic;
       use Config ();
       print $Config::Config{'ccflags'};
     }
</code></pre> instead.

See "optimizing compiler benchmarks part 3":http://blogs.perl.org/users/rurban/2012/10/optimizing-compiler-benchmarks-part-3.html

h3. match operator

The simple smartmatch is already taken and will just work, because all
data is dynamically typed.  But we want to match structures, to find
structures in trees (nested structures), not only strings, and we want
to declare macros easily.
See "magpie patterns":http://magpie.stuffwithstuff.com/patterns.html

<pre><code>
     my $s = "s";
     match /^s/, 123, 1 {
       case $s, $n is Int, $_: say "matched $s, $n, $_";
       else: say "no match";
     }
</code></pre>

@is Int@ is a new Type Pattern, which matches a type or subtype. 
It calls the typeof() function.
@is@ is a new keyword to match types in patterns.
$_ in patterns is always true and returns the given scalar value.
Use @_ to match multiple expressions, the "rest".

h3. flexible and efficient parser

The current "leg":http://piumarta.com/software/peg/ based p2 parser can handle complicated expressions and operator
precedence much better than the simple recursive descent LLAR @yacc@
parser in @perly.y@.  Problematic syntax can be avoided, like previously
mandatory parenthesis. @if@ or @while@ boolean expressions don't need
parens.

<pre><code>
     if $s say "$s;
     else say "else";
</code></pre>

@for@ lists should not need parens, the expressions are evaluated in list
context.

<pre><code>
     for $_ qw(a b c) {
     }

     const int[] sub get_list {(0..9)}

     for my int $i get_list {
       say $i;
     }
</code></pre>

The language should be extendable. Left or right assiocative keywords
should be easily added to the parser description, with statically
deterministic proper precedence rules.  (run-time extendable
associativity only with Pratt)

The packrat parser based on @leg@ is not quite as highly efficient and
dynamically extendable as a "Pratt top-down parser":http://journal.stuffwithstuff.com/2011/02/13/extending-syntax-from-within-a-language/ with special
operator precedence rules in the parser table declaration, but it does
not backtrack as much as @yacc@ in expressions due to memoizing, and
precedence is statically defined in the rules.

But in the end I'll need such a dynamic top-down parser to support macros.
The problem is that such a parser cannot be stolen yet, nobody has
written so far one in C, only in LISP or javascript. The idea to base 
macros on the parser probably didn't come to anyone yet
outside the LISP community. Rob Pike recently
presented a nice and easy-enough parser for 
"Go templates":https://www.youtube.com/watch?v=HxaD_trXwRE

h3. macros

macros expose the power of the parser to the language, as in LISP.
They allow extending and simplifying the language.

macros are compile-time parser extensions, rules added after startup,
which do not construct parse trees directy, but indirectly.  macro
argument declarations have the same syntax as @leg@, and may use the
same rules (i.e. nonterminal symbols) from the grammer, i.e. the left
hand side of the grammar rules, but the body is written in native
perl5, with a mix of compile-time and run-time expressions.

e.g. 
<pre><code>
  syntax-p5.g:
    block = '{' s:lineseq '}' { $$ = PN_AST(BLOCK, s); }
</code></pre>
<pre><code>
  macro ifdebug block {
    if $DEBUG `block`;
  }
</code></pre>

A macro can use any parser rule, here the rule @block@, and
even @b:block@ to assign the variable @b@ for the matched block, esp.
when matching two rules, i.e. @b1:block b2:block@

Most keywords should be defined as macros.  E.g. @for@, @while@ and
@match@ can be more easily defined as macros. Short circuiting and
partial evaluation should be possible in macros.

Normal functions or methods do not need to be defined in the language,
they are library calls. 90% of the ops previously defined in perl5 are
moved to the standard library. Most syntax extending declarations are
macros defined in the standard library.

With macros you can define your own compile-time optimizations.
Every statement in a macro, which is not evaluated, is not compiled in,
it is ignored. E.g. you can simplify all your @if $DEBUG@ statements,
and extend the expressibility of your code.

@()@ groups list in parse expressions, and does not match perl elements in lists.

<pre><code>
      macro dbgprint ( s:stmt )* {
        if ($DEBUG) {
          print @`s`;
        }
      }
</code></pre>

<pre><code>
      macro while '('e:expr')' '{'b:block'}' {
          my $label = gensym('WHILE');
	  $label: if (`e`) {
	     @`b`;
	     goto $label;
          }
      }
</code></pre>

'(' is to disambiguate a parse-time '(' from a grouping @(@.
`` is taken to evaluate (=expand) expressions within macros.
@@@`` splices expanded code in list context.
Similar to perl6 @quasi@ or @{{{ }}}@ blocks, just simplier.

Note that the return value of this while is always @undef@, and
the while construct needs the @()@ and @{}@, contrary to the current keyword.
But you can declare a while macro for the single block case without @{}@.



