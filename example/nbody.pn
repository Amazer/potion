#!/usr/local/bin/potion
# The Computer Language Shootout
# http://shootout.alioth.debian.org/
#
# contributed by Reini Urban
#debug = true
debug = false

pi            = 3.141592653589793
solar_mass    = 4 * pi * pi
days_per_year = 365.24

body = class(x=N, y=N, z=N, vx=N, vy=N, vz=N, mass=N):
  /x = x
  /y = y
  /z = z
  /vx = vx * days_per_year
  /vy = vy * days_per_year
  /vz = vz * days_per_year
  /mass = mass * solar_mass.

sun = body(0,0,0, 0,0,0, 1)
jupiter = body(4.84143144246472090, -1.16032004402742839, -1.03622044471123109e-01,
	1.66007664274403694e-03, 7.69901118419740425e-03, -6.90460016972063023e-05,
	9.54791938424326609e-04)
saturn = body(8.34336671824457987, 4.12479856412430479, -4.03523417114321381e-01,
       -2.76742510726862411e-03, 4.99852801234917238e-03, 2.30417297573763929e-05,
       2.85885980666130812e-04)
uranus = body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,
       2.96460137564761618e-03, 2.37847173959480950e-03, -2.96589568540237556e-05,
       4.36624404335156298e-05)
neptune = body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01, 
        2.68067772490389322e-03, 1.62824170038242295e-03, -9.51592254519715870e-05,
	5.15138902046611451e-05)
bodies = list(5)
bodies(0) = sun
bodies(1) = jupiter
bodies(2) = saturn
bodies(3) = uranus
bodies(4) = neptune
nbodies = 5 #bodies length

advance = (dt):
  i = 0
  while (i < nbodies):
    bi = bodies(i)
    bix = bi/x
    biy = bi/y
    biz = bi/z
    bivx = bi/vx
    bivy = bi/vy
    bivz = bi/vz
    bimass = bi/mass
    j = i+1
    while (j < nbodies):
      #if (debug): ("i", i, "j", j) say.
      bj = bodies(j)
      dx = bix - bj/x
      dy = biy - bj/y
      dz = biz - bj/z
      dist = dx*dx + dy*dy + dz*dz
      dist = dist sqrt
      mag = dt / (dist * dist * dist)
      #("mag", mag) say
      bim = bimass * mag
      bjm = bj/mass * mag
      #("bim", bim, "bjm", bjm) say
      bivx -= dx * bjm
      bivy -= dy * bjm
      bivz -= dz * bjm
      bj/vx += dx * bim
      bj/vy += dy * bim
      bj/vz += dz * bim
      j++
      .
    bi/vx = bivx
    bi/vy = bivy
    bi/vz = bivz
    i++..

offsetmomentum = (b, px, py, pz):
  b/vx = -px / solar_mass
  b/vy = -py / solar_mass
  b/vz = -pz / solar_mass
  b.

energy = ():
  e = 0.0
  i = 0
  while (i < nbodies):
    bi = bodies(i)
    bix = bi/x
    biy = bi/y
    biz = bi/z
    bivx = bi/vx
    bivy = bi/vy
    bivz = bi/vz
    bimass = bi/mass
    f = bivx * bivx + bivy * bivy + bivz * bivz
    e += 0.5 * bimass * f
    j = i+1
    while (j < nbodies):
      bj = bodies(j)
      dx = bix - bj/x
      dy = biy - bj/y
      dz = biz - bj/z
      dist = dx*dx + dy*dy + dz*dz
      dist = dist sqrt
      f = bimass * bj/mass
      e -= f / dist
      j++.
    i++.
  e.

n = argv at(1)
n = if (n): n integer. else: 50000.
debug1 = false
if (debug):
  ("n", n) say
  debug1 = true
  .

energy() say
k = 0
while (k < n):
  advance(0.01)
  if (debug1): ("advance", k, energy()) say.
  debug = false
  k++.
energy() say
